@page "/services"

@rendermode InteractiveServer

@inject IRepository<Service, int> servicesRepository;

@using Blazorise.DataGrid
@using Blazorise
@using MedicalCrmLib.Interfaces

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>Услуги</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="ShowAddServiceModal">
                    Добавить запись
                </Button>
                <Button Color="Color.Danger" Disabled="@(_selectedServices.Count == 0)"
                        Clicked="ConfirmDeleteSelectedServices">
                    Удалить выбранное
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="Service"
                  Data="@services"
                  SelectionMode="DataGridSelectionMode.Multiple"
                  @bind-SelectedRows="_selectedServices"
                  ShowPager="true"
                  PageSize="@GridPageSize"
                  Responsive Striped>
            <DataGridColumns>
                <DataGridMultiSelectColumn TItem="Service" Width="30px" />

                <DataGridColumn TItem="Service"
                                Field="@nameof(Service.Id)"
                                Caption="ID"
                                Sortable="false"
                                Filterable="false" />

                <DataGridColumn TItem="Service"
                                Field="@nameof(Service.Name)"
                                Caption="Название услуги" />

                <DataGridColumn TItem="Service"
                                Field="@nameof(Service.Cost)"
                                Caption="Стоимость" />

                <DataGridColumn TItem="Service"
                                Field="@nameof(Service.LaboratoryName)"
                                Caption="Название лаборатории" />

                <DataGridCommandColumn TItem="Service" Width="150px">
                    <DisplayTemplate>
                        <Button Color="Color.Danger" Clicked="@(() => DeleteService(context.Id))">
                            Удалить
                        </Button>
                    </DisplayTemplate>
                </DataGridCommandColumn>
            </DataGridColumns>

            <LoadingTemplate>
                <p>Загрузка...</p>
            </LoadingTemplate>

            <EmptyTemplate>
                <p>Нет записей.</p>
            </EmptyTemplate>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="addServiceModal" Size="ModalSize.Small" ShowCloseIcon="true" Style="background-color: white;">
    <ModalHeader>
        <h5>Добавить запись</h5>
    </ModalHeader>
    <ModalBody>
        <div class="mb-3">
            <label for="name">Название услуги:</label>
            <input type="text" id="name" @bind="newService.Name" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="cost">Стоимость:</label>
            <input type="number" id="cost" @bind="newService.Cost" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="laboratoryName">Название лаборатории:</label>
            <input type="text" id="laboratoryName" @bind="newService.LaboratoryName" class="form-control" />
        </div>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Clicked="AddNewService">
            Добавить
        </Button>
        <Button Color="Color.Secondary" Clicked="CancelClicked">
            Отмена
        </Button>
    </ModalFooter>
</Modal>

@code {
    private List<Service> services = new();
    private Service newService = new();
    private List<Service> _selectedServices = new();
    private Modal? addServiceModal = null!;
    private int GridPageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        services = await servicesRepository.GetAsList();
    }

    private async Task ShowAddServiceModal()
    {
        newService = new Service();
        await addServiceModal!.Show();
    }

    private async Task AddNewService()
    {
        await servicesRepository.Add(newService);
        services = await servicesRepository.GetAsList(); // Refresh the list
        await addServiceModal.Hide();
    }

    private async Task DeleteService(int id)
    {
        await servicesRepository.Delete(id);
        services = await servicesRepository.GetAsList(); // Refresh the list
    }

    private async Task ConfirmDeleteSelectedServices()
    {
        foreach (var service in _selectedServices.ToList())
        {
            await servicesRepository.Delete(service.Id);
        }
        _selectedServices.Clear();
        services = await servicesRepository.GetAsList(); // Refresh the list
    }

    private async Task CancelClicked()
    {
        await addServiceModal.Hide();
    }
}
