@page "/ppes"

@rendermode InteractiveServer

@inject IRepository<Ppe, string> ppeRepository;

@using Blazorise.DataGrid
@using Blazorise
@using MedicalCrmLib.Interfaces

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>Средства индивидуальной защиты</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="ShowAddPpeModal">
                    Добавить запись
                </Button>
                <Button Color="Color.Danger" Disabled="@(_selectedPpes.Count == 0)"
                        Clicked="ConfirmDeleteSelectedPpes">
                    Удалить выбранное
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="Ppe"
                  Data="@ppes"
                  SelectionMode="DataGridSelectionMode.Multiple"
                  @bind-SelectedRows="_selectedPpes"
                  ShowPager="true"
                  PageSize="@GridPageSize"
                  Responsive Striped>
            <DataGridColumns>
                <DataGridMultiSelectColumn TItem="Ppe" Width="30px" />

                <DataGridColumn TItem="Ppe"
                                Field="@nameof(Ppe.Name)"
                                Caption="Название"
                                Sortable="false"
                                Filterable="true" />

                <DataGridColumn TItem="Ppe"
                                Field="@nameof(Ppe.EmployeeId)"
                                Caption="ID сотрудника" />

                <DataGridColumn TItem="Ppe"
                                Field="@nameof(Ppe.Quantity)"
                                Caption="Количество" />

                <DataGridColumn TItem="Ppe"
                                Field="@nameof(Ppe.RequiredQuantity)"
                                Caption="Необходимое количество" />

                <DataGridColumn TItem="Ppe" Width="150px">
                    <DisplayTemplate>
                        <Button Color="Color.Info" Clicked="@(() => ShowEditPpeModal(context))">
                            Редактировать
                        </Button>
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>

            <LoadingTemplate>
                <p>Загрузка...</p>
            </LoadingTemplate>

            <EmptyTemplate>
                <p>Нет записей.</p>
            </EmptyTemplate>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="addPpeModal" Size="ModalSize.Small" ShowCloseIcon="true" Style="background-color: white;">
    <ModalHeader>
        <h5>Добавить запись</h5>
    </ModalHeader>
    <ModalBody>
        <div class="mb-3">
            <label for="name">Название:</label>
            <input type="text" id="name" @bind="newPpe.Name" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="employeeId">ID сотрудника:</label>
            <input type="number" id="employeeId" @bind="newPpe.EmployeeId" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="quantity">Количество:</label>
            <input type="number" id="quantity" @bind="newPpe.Quantity" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="requiredQuantity">Необходимое количество:</label>
            <input type="number" id="requiredQuantity" @bind="newPpe.RequiredQuantity" class="form-control" />
        </div>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Clicked="AddNewPpe">
            Добавить
        </Button>
        <Button Color="Color.Secondary" Clicked="CancelClicked">
            Отмена
        </Button>
    </ModalFooter>
</Modal>

<Modal @ref="editPpeModal" Size="ModalSize.Small" ShowCloseIcon="true" Style="background-color: white;">
    <ModalHeader>
        <h5>Редактировать запись</h5>
    </ModalHeader>
    <ModalBody>
        <div class="mb-3">
            <label for="editQuantity">Количество:</label>
            <input type="number" id="editQuantity" @bind="editingPpe.Quantity" class="form-control" />
        </div>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Clicked="SaveEditedPpe">
            Сохранить
        </Button>
        <Button Color="Color.Secondary" Clicked="CancelEditClicked">
            Отмена
        </Button>
    </ModalFooter>
</Modal>

@code {
    private List<Ppe> ppes = new();
    private Ppe newPpe = new();
    private Ppe editingPpe = new();
    private List<Ppe> _selectedPpes = new();
    private Modal? addPpeModal = null!;
    private Modal? editPpeModal = null!;
    private int GridPageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        ppes = await ppeRepository.GetAsList();
    }

    private async Task ShowAddPpeModal()
    {
        newPpe = new Ppe();
        await addPpeModal!.Show();
    }

    private async Task AddNewPpe()
    {
        await ppeRepository.Add(newPpe);
        ppes = await ppeRepository.GetAsList();
        await addPpeModal.Hide();
    }

    private async Task ShowEditPpeModal(Ppe ppe)
    {
        editingPpe = new Ppe
            {
                Name = ppe.Name,
                EmployeeId = ppe.EmployeeId,
                Quantity = ppe.Quantity,
                RequiredQuantity = ppe.RequiredQuantity
            };
        await editPpeModal!.Show();
    }

    private async Task SaveEditedPpe()
    {
        await ppeRepository.Update(editingPpe);
        ppes = await ppeRepository.GetAsList();
        await editPpeModal.Hide();
    }

    private async Task DeletePpe(string name)
    {
        var ppeToDelete = ppes.FirstOrDefault(p => p.Name == name);
        if (ppeToDelete != null)
        {
            await ppeRepository.Delete(ppeToDelete.Name);
            ppes = await ppeRepository.GetAsList();
        }
    }

    private async Task ConfirmDeleteSelectedPpes()
    {
        foreach (var ppe in _selectedPpes.ToList())
        {
            await ppeRepository.Delete(ppe.Name);
        }
        _selectedPpes.Clear();
        ppes = await ppeRepository.GetAsList();
    }

    private async Task CancelClicked()
    {
        await addPpeModal.Hide();
    }

    private async Task CancelEditClicked()
    {
        await editPpeModal.Hide();
    }
}
