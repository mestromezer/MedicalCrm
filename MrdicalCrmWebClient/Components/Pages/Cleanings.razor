@page "/cleanings"

@rendermode InteractiveServer

@inject IRepository<CleaningRecord, int> cleaningRecordsRepository;   

@using Blazorise.DataGrid
@using Blazorise
@using MedicalCrmLib.Interfaces

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>График уборки</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="ShowAddRecordModal">
                    Добавить запись
                </Button>
                <Button Color="Color.Danger" Disabled="@(_selectedRecords.Count == 0)"
                        Clicked="ConfirmDeleteSelectedRecords">
                    Удалить выбранное
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="CleaningRecord"
                  Data="@cleaningRecords"
                  SelectionMode="DataGridSelectionMode.Multiple"
                  @bind-SelectedRows="_selectedRecords"
                  ShowPager="true"
                  PageSize="@GridPageSize"
                  Responsive Striped>
            <DataGridColumns>
                <DataGridMultiSelectColumn TItem="CleaningRecord" Width="30px" />

                <DataGridColumn TItem="CleaningRecord"
                                Field="@nameof(CleaningRecord.Id)"
                                Caption="ID"
                                Sortable="false"
                                Filterable="false" />

                <DataGridColumn TItem="CleaningRecord"
                                Field="@nameof(CleaningRecord.Cabinet)"
                                Caption="Номер кабинета" />

                <DataGridColumn TItem="CleaningRecord"
                                Field="@nameof(CleaningRecord.EmployeeId)"
                                Caption="Номер сотрудника" />

                <DataGridCommandColumn TItem="CleaningRecord" Width="150px">
                    <DisplayTemplate>
                        <Button Color="Color.Danger" Clicked="@(() => DeleteRecord(context.Id))">
                            Удалить
                        </Button>
                    </DisplayTemplate>
                </DataGridCommandColumn>
            </DataGridColumns>

            <LoadingTemplate>
                <p>Загрузка...</p>
            </LoadingTemplate>

            <EmptyTemplate>
                <p>Нет записей.</p>
            </EmptyTemplate>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="addRecordModal" Size="ModalSize.Small" ShowCloseIcon="true" Style="background-color: white;">
    <ModalHeader>
        <h5>Добавить запись</h5>
    </ModalHeader>
    <ModalBody>
        <div class="mb-3">
            <label for="cabinet">Cabinet:</label>
            <input type="number" id="cabinet" @bind="newRecord.Cabinet" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="employeeId">Employee ID:</label>
            <input type="number" id="employeeId" @bind="newRecord.EmployeeId" class="form-control" />
        </div>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Clicked="AddNewRecord">
            Добавить
        </Button>
        <Button Color="Color.Secondary" Clicked="CancelClicked">
            Отмена
        </Button>
    </ModalFooter>
</Modal>

@code {
    private List<CleaningRecord> cleaningRecords = new();
    private CleaningRecord newRecord = new();
    private List<CleaningRecord> _selectedRecords = new();
    private Modal? addRecordModal = null!;
    private int GridPageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        cleaningRecords = await cleaningRecordsRepository.GetAsList();
    }

    private async Task ShowAddRecordModal()
    {
        newRecord = new CleaningRecord();
        await addRecordModal!.Show();
    }

    private async Task AddNewRecord()
    {
        await cleaningRecordsRepository.Add(newRecord);
        await addRecordModal.Hide();
        cleaningRecords = await cleaningRecordsRepository.GetAsList();
    }

    private async Task DeleteRecord(int id)
    {
        await cleaningRecordsRepository.Delete(id);
        cleaningRecords = await cleaningRecordsRepository.GetAsList();
    }

    private async Task ConfirmDeleteSelectedRecords()
    {
        foreach (var record in _selectedRecords.ToList())
        {
            await cleaningRecordsRepository.Delete(record.Id);
        }
        _selectedRecords.Clear();
        cleaningRecords = await cleaningRecordsRepository.GetAsList();
    }

    private async Task CancelClicked()
    {
        await addRecordModal.Hide();
    }
}
