@page "/login"

@using System.Security.Claims
@using MedicalCrmWebApplication.Model
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies

@inject IRepository<Account, string> AccountRepository
@inject NavigationManager NavigationManager

<EditForm Model="Model" OnValidSubmit="Authenticate" FormName="LoginForm">
    <div class="mb-3 text-center flex-column">
        <h3>Вход</h3>
    </div>
    <div class="mb-3">
        <label>Login</label>
        <InputText @bind-Value="Model.Login" class="from-control" placeholder="Username" />
        <ValidationMessage For="() => Model.Login" />
    </div>
    <div class="mb-3">
        <label>Password</label>
        <InputText @bind-Value="Model.Password" class="from-control" placeholder="Password" />
        <ValidationMessage For="() => Model.Password" />
    </div>
    <div class="mb-3 text-center">
        <span class="text-danger">@ErrorMessage</span>
    </div>
    <div class="mb-3 d-grid gap-2">
        <button type="submit" class="btn btn-primary">Войти</button>
    </div>
</EditForm>

@code {
    [CascadingParameter] 
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private LoginViewModel Model { get; set; } = new();

    private string? ErrorMessage { get; set; } = null;

    private async Task Authenticate()
    {
        var target = (await AccountRepository.GetAsList()).FirstOrDefault(a => a.Login == Model.Login);
        if (target is null || Model.Password != target.Password)
        {
            ErrorMessage = "Неверные данные.";
            return;
        }

        var claims = new List<Claim>()
        {
            new(ClaimTypes.Name, Model.Login!),
            new(ClaimTypes.Role, target!.UserRole!)
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);

        if (HttpContext != null)
        { 
            await HttpContext.SignInAsync(principal);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            throw new NullReferenceException("Объект контекста не был предоставлен.");
        }
    }

}