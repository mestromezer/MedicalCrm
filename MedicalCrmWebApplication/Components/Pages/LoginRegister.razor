@page "/account"
@using MedicalCrmLib.Dtos

@inject IRepository<Account, string> AccountRepository
@inject ISecurityService SecurityService
@inject IAltairCABlazorCookieUtil cookiesUtil;

<Row>
    <!-- Форма регистрации -->
    <Column ColumnSize="ColumnSize.Is6">
        <Card>
            <CardHeader>
                <h4>Регистрация</h4>
            </CardHeader>
            <CardBody>
                <div class="mb-3">
                    <label for="registerUsername">Логин:</label>
                    <input type="text" id="registerUsername" @bind="newAccount.Login" class="form-control"/>
                </div>
                <div class="mb-3">
                    <label for="registerPassword">Пароль:</label>
                    <input type="password" id="registerPassword" @bind="newAccount.Password" class="form-control"/>
                </div>
                <div class="mb-3">
                    <label for="userRole">Должность пользователя:</label>
                    <Select TItem="string" @bind-SelectedValue="newAccount.UserRole" Class="form-control">
                        <SelectItem Value="@("Заведующий лабораторией")">Заведующий лабораторией</SelectItem>
                        <SelectItem Value="@("Старший фельдшер-лаборант")">Старший фельдшер-лаборант</SelectItem>
                        <SelectItem Value="@("Фельдшер-лаборант")">Фельдшер-лаборант</SelectItem>
                        <SelectItem Value="@("Сотрудник регистратуры")">Сотрудник регистратуры</SelectItem>
                    </Select>
                </div>
                <Button Color="Color.Primary" Clicked="Register">Создать аккаунт</Button>
            </CardBody>
        </Card>
    </Column>

    <!-- Форма логина -->
    <Column ColumnSize="ColumnSize.Is6">
        <Card>
            <CardHeader>
                <h4>Вход</h4>
            </CardHeader>
            <CardBody>
                <div class="mb-3">
                    <label for="loginUsername">Логин:</label>
                    <input type="text" id="loginUsername" @bind="loginModel.Login" class="form-control"/>
                </div>
                <div class="mb-3">
                    <label for="loginPassword">Пароль:</label>
                    <input type="password" id="loginPassword" @bind="loginModel.Password" class="form-control"/>
                </div>
                <Button Color="Color.Primary" Clicked="Login">Войти</Button>
            </CardBody>
        </Card>
    </Column>
</Row>

<Alert @ref="registrationAlertUserExists" Color="Color.Danger" Visible="false">
    Пользователь с указанным паролем уже есть в системе.
</Alert>

<Alert @ref="loginAlert" Color="Color.Danger" Visible="false">
    Неправильное имя пользователя или пароль.
</Alert>

<Alert @ref="registrationAlert" Color="Color.Danger" Visible="false">
    Ошибка при создании аккаунта. Попробуйте снова. Возможно некоторые поля были пустыми.
</Alert>

@code {

    private Account newAccount = new Account();
    private Account loginModel = new Account();

    private Alert? loginAlert;
    private Alert? registrationAlert;
    private Alert? registrationAlertUserExists;

    private async Task Register()
    {
        if (string.IsNullOrWhiteSpace(newAccount.Login)
            || string.IsNullOrWhiteSpace(newAccount.Password)
            || string.IsNullOrWhiteSpace(newAccount.UserRole))
        {
            await registrationAlert!.Show();
            return;
        }

        var users = await AccountRepository.GetAsList();

        if (users.FirstOrDefault(u => u.Login == newAccount.Login) != null)
        {
            await registrationAlertUserExists!.Show();
            return;
        }

        var dto = new RegisterDto(newAccount.Login, newAccount.Password!, newAccount.UserRole!);
        await SecurityService.RegisterUser(dto);
    }

    private async Task Login()
    {
        if (string.IsNullOrWhiteSpace(loginModel.Login))
            await registrationAlert!.Show();
        
        if (string.IsNullOrWhiteSpace(newAccount.UserRole))
            await registrationAlert!.Show();
        
        var dto = new LoginDto(newAccount.Login, newAccount.Password!);
        try
        {
            var token = await SecurityService.GetUserJwt(dto);
            await cookiesUtil.SetValueAsync("jwt", token);
        }
        catch
        {
            await loginAlert!.Show();
        }
    }

}