@page "/order-services"
@rendermode InteractiveServer

@inject IRepository<OrderService, int> orderServiceRepository;

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h4>Услуги в заказе</h4>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Primary" Clicked="ShowAddOrderServiceModal">
                    Добавить услугу
                </Button>
                <Button Color="Color.Danger" Disabled="@(_selectedOrderServices.Count == 0)"
                        Clicked="ConfirmDeleteSelectedOrderServices">
                    Удалить выбранные
                </Button>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="OrderService"
                  Data="@orderServices"
                  SelectionMode="DataGridSelectionMode.Multiple"
                  @bind-SelectedRows="_selectedOrderServices"
                  ShowPager="true"
                  PageSize="@GridPageSize"
                  Responsive Striped>
            <DataGridColumns>
                <DataGridMultiSelectColumn TItem="OrderService" Width="30px" />

                <DataGridColumn TItem="OrderService"
                                Field="@nameof(OrderService.OrderServiceId)"
                                Caption="ID услуги" />

                <DataGridColumn TItem="OrderService"
                                Field="@nameof(OrderService.ServiceListId)"
                                Caption="ID услуги в перечне" />

                <DataGridColumn TItem="OrderService"
                                Field="@nameof(OrderService.OrderId)"
                                Caption="ID заказа" />

                <DataGridCommandColumn TItem="OrderService" Width="150px">
                    <DisplayTemplate>
                        <Button Color="Color.Danger" Clicked="@(() => DeleteOrderService(context.OrderServiceId))">
                            Удалить
                        </Button>
                    </DisplayTemplate>
                </DataGridCommandColumn>
            </DataGridColumns>

            <LoadingTemplate>
                <p>Загрузка...</p>
            </LoadingTemplate>

            <EmptyTemplate>
                <p>Нет записей.</p>
            </EmptyTemplate>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="addOrderServiceModal" Size="ModalSize.Small" ShowCloseIcon="true" Style="background-color: white;">
    <ModalHeader>
        <h5>Добавить услугу</h5>
    </ModalHeader>
    <ModalBody>
        <div class="mb-3">
            <label for="serviceListId">ID услуги в перечне:</label>
            <input type="number" id="serviceListId" @bind="newOrderService.ServiceListId" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="orderId">ID заказа:</label>
            <input type="number" id="orderId" @bind="newOrderService.OrderId" class="form-control" />
        </div>
    </ModalBody>
    <ModalFooter>
        <Button Color="Color.Primary" Clicked="AddNewOrderService">
            Добавить
        </Button>
        <Button Color="Color.Secondary" Clicked="CancelClicked">
            Отмена
        </Button>
    </ModalFooter>
</Modal>

@code {
    private List<OrderService> orderServices = new();
    private OrderService newOrderService = new();
    private List<OrderService> _selectedOrderServices = new();
    private Modal? addOrderServiceModal = null!;
    private int GridPageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        orderServices = await orderServiceRepository.GetAsList();
    }

    private async Task ShowAddOrderServiceModal()
    {
        newOrderService = new OrderService();
        await addOrderServiceModal!.Show();
    }

    private async Task AddNewOrderService()
    {
        await orderServiceRepository.Add(newOrderService);
        orderServices = await orderServiceRepository.GetAsList();
        await addOrderServiceModal.Hide();
    }

    private async Task DeleteOrderService(int orderServiceId)
    {
        await orderServiceRepository.Delete(orderServiceId);
        orderServices = await orderServiceRepository.GetAsList();
    }

    private async Task ConfirmDeleteSelectedOrderServices()
    {
        foreach (var orderService in _selectedOrderServices.ToList())
        {
            await orderServiceRepository.Delete(orderService.OrderServiceId);
        }
        _selectedOrderServices.Clear();
        orderServices = await orderServiceRepository.GetAsList();
    }

    private async Task CancelClicked()
    {
        await addOrderServiceModal.Hide();
    }
}
